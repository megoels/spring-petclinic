pipeline {
    agent { node { label 'petclinic-ci' } }

    environment {
        TEST_PREFIX = "test-IMAGE"
        TEST_IMAGE = "${env.TEST_PREFIX}:${env.BUILD_NUMBER}"
        TEST_CONTAINER = "${env.TEST_PREFIX}-${env.BUILD_NUMBER}"

        COMPOSE_FILE = "docker-compose.yml"
        STACK_PREFIX = "petclinic"
        EXPECTED_CONTAINERS= "4"
        APP_CONTAINERS  = "2"
    }

    stages {
        
        stage('Prepare'){
            steps {
                deleteDir()
                checkout scm
                // setup env...
                // copy the petclinic.jar from the ci Job 
                step([$class: 'CopyArtifact',
                    projectName: 'spring-petclinic-ci/master',
                    //filter: 'target/petclinic.war',
                    //target: "${env.WORKSPACE}/petclinic.war"]);
                    filter: 'target/*.jar',
                    target: "${env.WORKSPACE}"]);
                sh "mv ${env.WORKSPACE}/target/spring-petclinic-*.jar ${env.WORKSPACE}/cd_pipeline/petclinic.jar"
            }
        }

        stage("Build and start test image") {
            steps {
                sh "docker-compose build"
                sh "docker-compose up -d"
                //TODO: sh "docker-compose up -d --scale petclinic=${env.APP_CONTAINERS}"
                //sh "sleep 50"
                // wait until the containers are up and running
                sh """
                    docker run --rm \
                        -v '${env.WORKSPACE}':'/project':ro \
                        -v /var/run/docker.sock:/var/run/docker.sock:ro \
                        -e TIMEOUT=120 \
                        -e COMPOSE_PROJECT_NAME=\$(basename \"'${env.WORKSPACE}'\") \
                        -e EXPECTED_CONTAINERS=\"'${env.EXPECTED_CONTAINERS}'\" \
                        softonic/compose-project-is-up
                """
                //Waits until a compose project is running: https://github.com/softonic/compose-project-is-up
            }
        }

        stage("Determine new version") {
            when {
                branch "master"
            }

            steps {
                script {
                    //CLI program to determine the new version: https://github.com/softonic/ci-version
                    //env.DEPLOY_VERSION = sh (returnStdout: true, script: "docker run --rm -v '${env.WORKSPACE}':/repo:ro softonic/ci-version:0.1.0 --compatible-with package.json").trim()
                    env.DEPLOY_VERSION = sh (returnStdout: true, script: "docker run --rm -v '${env.WORKSPACE}':/repo:ro softonic/ci-version:0.1.0").trim()
                    env.DEPLOY_MAJOR_VERSION = sh (returnStdout: true, script: "echo '${env.DEPLOY_VERSION}' | awk -F'[ .]' '{print \$1}'").trim()
                    env.DEPLOY_COMMIT_HASH = sh (returnStdout: true, script: "git rev-parse HEAD | cut -c1-7").trim()
                    env.DEPLOY_BUILD_DATE = sh (returnStdout: true, script: "date -u +'%Y-%m-%dT%H:%M:%SZ'").trim()

                    env.DEPLOY_STACK_NAME = "${env.STACK_PREFIX}-v${env.DEPLOY_MAJOR_VERSION}"
                    env.IS_NEW_VERSION = sh (returnStdout: true, script: "[ '${env.DEPLOY_VERSION}' ] && echo 'YES'").trim()
                }
            }
        }

        stage("Create new version") {
            when {
                branch "master"
                environment name: "IS_NEW_VERSION", value: "YES"
            }

            steps {
                script {
                    sshagent(['ci-ssh']) {
                        sh """
                            git config user.email "mego20els@hotmail.com"
                            git config user.name "megoels"
                            git tag -a "v${env.DEPLOY_VERSION}" \
                                -m "Generated by: ${env.JENKINS_URL}" \
                                -m "Job: ${env.JOB_NAME}" \
                                -m "Build: ${env.BUILD_NUMBER}" \
                                -m "Env Branch: ${env.BRANCH_NAME}"
                            git push origin "v${env.DEPLOY_VERSION}"
                        """
                    }
                }
            }
        }
    }

    post('Results') {
      success { 
            archive '${env.WORKSPACE}/cd_pipeline/*.jar'
            //TODO: versioning
      }
      failure {
            mail body: "Please check the errors here: ${env.BUILD_URL}" ,
                from: 'megoels4tests@gmail.com',
                replyTo: 'mego20els@hotmail.com',
                subject: "The Jenkins job ${env.JOB_NAME} failed",
                to: 'mego20els@hotmail.com'
      }
      always {
          // remove docker containers
          sh "docker-compose down || true"
      }
    }
}
